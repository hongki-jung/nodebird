{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducer } from 'redux'; // const initialState = {\n//     name:'zerocho',\n//     age:27,\n//     password:'babo',\n// }\n// const changeNickname = {\n//     type:'CHANGE_NICKNAME',\n//     data:'boogicho'\n// }\n// 모든 액션을 미리 만들어 놓는 것은 불가능하다. \n//그때그때 필요할 때 마다 동적으로 액션을 만들자\n// => action creator\n// const changeNickname = (data) =>{\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// }\n// changeNickname('boogicho');\n// {\n//     type:'CHANGE_NICKNAME',\n//     data: ' neue zeal'\n// }\n// store.dispatch(changeNickname('mighty tak'))\n// reducer ()\n// : 이전 상태와 액션을 통해서 다음 상태를 만들어낸다. \n//  reducer는 함수다. \n//  (이전상태 ,액션) => 다음상태\n// const rootReducer = (state = initialState, action)=>{\n//     switch(action.type){\n//         case 'CHANGE_NICKNAME':\n//             return{\n//                 // 이런식으로 해야 history가 남는다. \n//                 // name만 바꿔주고 나머지 것들은 그대로 남겨둔다. \n//                 ...state,\n//                 name: action.data,\n//             }\n//     }\n// };\n\nconst initialState = {\n  user: {},\n  post: {}\n}; // const rootReducer = (state = initialState, action)=>{\n//     switch(action.type){\n//         //아래 두 줄을 추가하면 리덕스까지 서버사이드 렌더링이 된다.\n//         // next기능 \n//         case HYDRATE:\n//             return {...state, ...action.payload}\n//         default:\n//             return state;\n//     }\n// };\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    //아래 두 줄을 추가하면 리덕스까지 서버사이드 렌더링이 된다.\n    // next기능 \n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/jeonghong-gi/Desktop/nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducer","initialState","rootReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAuB,oBAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,cAAT,QAA+B,OAA/B,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAIA,MAAMC,YAAY,GAAG;AACjBH,EAAAA,IAAI,EAAC,EADY;AAIjBC,EAAAA,IAAI,EAAC;AAJY,CAArB,C,CAaA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;AAMA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAgC;AAEhD,UAAOA,MAAM,CAACC,IAAd;AAEI;AACA;AACA,SAAKR,OAAL;AACI,6CAAWM,KAAX,GAAqBC,MAAM,CAACE,OAA5B;;AAEJ;AACI,aAAOH,KAAP;AARR;AAYH,CAdD;;AAmBA,eAAeD,WAAf","sourcesContent":["import  {HYDRATE} from 'next-redux-wrapper'\nimport user from './user';\nimport post from './post';\nimport { combineReducer } from 'redux'\n\n// const initialState = {\n//     name:'zerocho',\n//     age:27,\n//     password:'babo',\n\n// }\n\n// const changeNickname = {\n//     type:'CHANGE_NICKNAME',\n//     data:'boogicho'\n// }\n\n\n\n\n// 모든 액션을 미리 만들어 놓는 것은 불가능하다. \n//그때그때 필요할 때 마다 동적으로 액션을 만들자\n// => action creator\n// const changeNickname = (data) =>{\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// }\n\n// changeNickname('boogicho');\n// {\n//     type:'CHANGE_NICKNAME',\n//     data: ' neue zeal'\n\n// }\n\n// store.dispatch(changeNickname('mighty tak'))\n\n\n\n// reducer ()\n// : 이전 상태와 액션을 통해서 다음 상태를 만들어낸다. \n//  reducer는 함수다. \n//  (이전상태 ,액션) => 다음상태\n\n// const rootReducer = (state = initialState, action)=>{\n\n//     switch(action.type){\n//         case 'CHANGE_NICKNAME':\n//             return{\n//                 // 이런식으로 해야 history가 남는다. \n//                 // name만 바꿔주고 나머지 것들은 그대로 남겨둔다. \n//                 ...state,\n//                 name: action.data,\n//             }\n\n//     }\n\n// };\n\n\n\nconst initialState = {\n    user:{\n       \n    },\n    post:{\n       \n    }\n}\n\n\n\n\n\n// const rootReducer = (state = initialState, action)=>{\n  \n//     switch(action.type){\n\n//         //아래 두 줄을 추가하면 리덕스까지 서버사이드 렌더링이 된다.\n//         // next기능 \n//         case HYDRATE:\n//             return {...state, ...action.payload}\n\n//         default:\n//             return state;\n\n//     }\n\n// };\n\n\n\n\n\nconst rootReducer = (state = initialState, action)=>{\n  \n    switch(action.type){\n\n        //아래 두 줄을 추가하면 리덕스까지 서버사이드 렌더링이 된다.\n        // next기능 \n        case HYDRATE:\n            return {...state, ...action.payload}\n\n        default:\n            return state;\n\n    }\n\n};\n\n\n\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}