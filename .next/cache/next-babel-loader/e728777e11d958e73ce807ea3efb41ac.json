{"ast":null,"code":"var _jsxFileName = \"/Users/jeonghong-gi/Desktop/nodebird/prepare/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages'; // post는 부모( /pages/index.js)로부터 받아온다\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user); // const id = me && me.id;\n\n  const id = me === null || me === void 0 ? void 0 : me.id; // 토글 활용 예시. true면 false, false면 true\n\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      marginButtom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Image[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 41\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 28\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 33\n        }\n      }, \" \\uC218\\uC815 \"), __jsx(Button, {\n        type: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 33\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }\n      }, \" \\uC2E0\\uACE0 \")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => {\n      __jsx(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 45\n          }\n        }, item.User.nickname[0]),\n        content: item.content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }))));\n};\n\nPostCard.PropTypes = {\n  // post: PropTypes.object.isRequired\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/jeonghong-gi/Desktop/nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","useSelector","Card","Popover","Button","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PostImages","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","me","state","user","id","onToggleLike","prev","onToggleComment","marginButtom","Image","Images","User","nickname","content","Comments","length","item","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,IAAR,EAAcC,OAAd,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CC,OAA7C,QAA2D,MAA3D;AACA,SAAQC,eAAR,EAAyBC,aAAzB,EAAwCC,eAAxC,EAAyDC,gBAAzD,EAA2EC,YAA3E,QAA8F,mBAA9F;AAEA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAGxB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAOC;AAAP,MAAmBnB,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM;AAAA,OAACoB,iBAAD;AAAA,OAAoBC;AAApB,MAA2CrB,QAAQ,CAAC,KAAD,CAAzD;AAEA,QAAM;AAAEsB,IAAAA;AAAF,MAAQnB,WAAW,CAAEoB,KAAD,IAASA,KAAK,CAACC,IAAhB,CAAzB,CANwB,CAOxB;;AACA,QAAMC,EAAE,GAAGH,EAAH,aAAGA,EAAH,uBAAGA,EAAE,CAAEG,EAAf,CARwB,CAUxB;;AACA,QAAMC,YAAY,GAAGzB,WAAW,CAAC,MAAI;AACjCkB,IAAAA,QAAQ,CAAEQ,IAAD,IAAQ,CAACA,IAAV,CAAR;AACH,GAF+B,EAE9B,EAF8B,CAAhC;AAIA,QAAMC,eAAe,GAAG3B,WAAW,CAAC,MAAI;AACpCoB,IAAAA,oBAAoB,CAAEM,IAAD,IAAU,CAACA,IAAZ,CAApB;AACH,GAFkC,EAEjC,EAFiC,CAAnC;AAIA,SACI;AAAK,IAAA,KAAK,EAAE;AAACE,MAAAA,YAAY,EAAC;AAAd,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,MAAC,IAAD;AACI,IAAA,KAAK,EAAEZ,IAAI,CAACa,KAAL,CAAW,CAAX,KAAiB,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEb,IAAI,CAACc,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5B;AAGI,IAAA,OAAO,EAAE,CACL,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAGLb,KAAK,GACG,MAAC,YAAD;AAAc,MAAA,YAAY,EAAC,SAA3B;AAAqC,MAAA,GAAG,EAAC,OAAzC;AAAiD,MAAA,OAAO,EAAEQ,YAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAEE,MAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,OAAO,EAAEA,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAOL,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,SAArB;AAA+B,MAAA,OAAO,EAAEE,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPK,EAQL,MAAC,OAAD;AAAS,MAAA,GAAG,EAAC,MAAb;AAAoB,MAAA,OAAO,EAC3B,MAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACMH,EAAE,IAAIR,IAAI,CAACe,IAAL,CAAUP,EAAV,KAAiBA,EAAvB,GACE,4BACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,CADF,GAKE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANR,CADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,CARK,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA0BI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASR,IAAI,CAACe,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADZ;AAEI,IAAA,KAAK,EAAEhB,IAAI,CAACe,IAAL,CAAUC,QAFrB;AAGI,IAAA,WAAW,EAAEhB,IAAI,CAACiB,OAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,CAFJ,EAmCKd,iBAAiB,IAAI,4BAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,IAAI,EAAEH,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,IAAD;AACI,IAAA,MAAM,EAAG,GAAEA,IAAI,CAACkB,QAAL,CAAcC,MAAO,OADpC;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAEnB,IAAI,CAACkB,QAHrB;AAII,IAAA,UAAU,EAAGE,IAAD,IAAQ;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,OAAD;AACI,QAAA,MAAM,EAAEA,IAAI,CAACL,IAAL,CAAUC,QADtB;AAEI,QAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASI,IAAI,CAACL,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAFZ;AAGI,QAAA,OAAO,EAAEI,IAAI,CAACH,OAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AASH,KAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADkB,CAnC1B,CADJ;AA8DH,CAjFD;;AAoFAlB,QAAQ,CAACd,SAAT,GAAoB;AAChB;AAEAe,EAAAA,IAAI,EAACf,SAAS,CAACoC,KAAV,CAAgB;AACjBb,IAAAA,EAAE,EAACvB,SAAS,CAACqC,MADI;AAEjBP,IAAAA,IAAI,EAAC9B,SAAS,CAACsC,MAFE;AAGjBN,IAAAA,OAAO,EAAChC,SAAS,CAACuC,MAHD;AAIjBC,IAAAA,SAAS,EAACxC,SAAS,CAACsC,MAJH;AAKjBL,IAAAA,QAAQ,EAAEjC,SAAS,CAACyC,OAAV,CAAkBzC,SAAS,CAACsC,MAA5B,CALO;AAMjBT,IAAAA,MAAM,EAAE7B,SAAS,CAACyC,OAAV,CAAkBzC,SAAS,CAACsC,MAA5B;AANS,GAAhB,EAQFI;AAXa,CAApB;AAeA,eAAe5B,QAAf","sourcesContent":["import React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport {useSelector} from 'react-redux';\nimport {Card, Popover, Button, Avatar, List, Comment} from 'antd';\nimport {RetweetOutlined ,HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone} from '@ant-design/icons';\n\nimport PostImages from './PostImages';\n\n// post는 부모( /pages/index.js)로부터 받아온다\nconst PostCard = ({post}) =>{\n\n\n    const [liked,setLiked] = useState(false);\n    const [commentFormOpened, setCommentFormOpened] =useState(false);\n\n    const { me } =useSelector((state)=>state.user);\n    // const id = me && me.id;\n    const id = me?.id;\n    \n    // 토글 활용 예시. true면 false, false면 true\n    const onToggleLike = useCallback(()=>{\n        setLiked((prev)=>!prev);\n    },[]);\n\n    const onToggleComment = useCallback(()=>{\n        setCommentFormOpened((prev) => !prev)\n    },[])\n\n    return(\n        <div style={{marginButtom:20}}>\n  \n            <Card\n                cover={post.Image[0] && <PostImages images={post.Images}/>}    \n\n                actions={[\n                    <RetweetOutlined key=\"retweet\"/>,\n\n                    liked \n                        ?   <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike}/>\n                        :  <HeartOutlined key=\"heart\" onClick={onToggleLike}/>,\n                    \n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n                    <Popover key=\"more\" content={(\n                    <Button.Group>\n                        { id && post.User.id === id ? (\n                            <>\n                                <Button> 수정 </Button>\n                                <Button type=\"danger\">삭제</Button>\n                            </>\n                        ) : <Button> 신고 </Button>}\n                    </Button.Group>  \n                    )}>\n                        <EllipsisOutlined />\n                    </Popover>\n                ]}\n            >\n   \n                <Card.Meta \n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n                    title={post.User.nickname}\n                    description={post.content}\n                />\n               \n            </Card>\n            {commentFormOpened && <>\n                <div>\n                    <CommentForm post={post}/>\n                    <List \n                        header={`${post.Comments.length}개의 댓글`}\n                        itemLayout=\"horizontal\"\n                        dataSource={post.Comments}\n                        renderItem={(item)=>{\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                                    content={item.content}\n                                >\n                                    \n                                </Comment>\n                            </li>\n                        }}\n                    />\n                </div> \n            </>}\n            {/* <CommentForm />\n            <Comments /> */}\n\n        </div>\n    )\n};\n\n\nPostCard.PropTypes ={\n    // post: PropTypes.object.isRequired\n\n    post:PropTypes.shape({\n        id:PropTypes.number,\n        User:PropTypes.object,\n        content:PropTypes.string,\n        createdAt:PropTypes.object,\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n\n    }).isRequired,\n\n};\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}