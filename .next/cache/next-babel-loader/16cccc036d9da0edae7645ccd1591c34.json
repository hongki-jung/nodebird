{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers/index'; // configureStore.js\n\n/* \n\nQ1. Redux , Mobax, ContextAPI를 왜 사용하는가? \n여러 컴포넌트들에서 공통적으로 쓰이는 데이터가 있는데 , \n그런 데이터들을 중앙에서 관리하기 위해서 쓰인다. (중앙데이터 저장소)\n매번 부모에서 자식컴포넌트로 프롭을 전달하는데 한계가 있다.\n\nex. 로그인한 사람 정보, 로그인 여부가 각 페이지의 권한 체크쓰인다. \n\n\n\n\nQ2 . ContextAPI 와  Redux, Mobax의 차이? \n=> 비동기를 지원하기 쉽냐 어렵냐 \n\n셋 다 중앙 저장소에서 데이터를 처리하는 방식이지만 \n리덕스나 모벡스는 비동기 처리도 알아서 해주는 반면에\n ContextAPI는 비동기 처리를 직접 구현해야한다.\n\n*중앙저장소가 있으면 보통 서버에서 데이터를 받아온다 .\n(서버에서 데이터를 받아오는 건 항상 비동기)\n\n*/\n\nconst configureStore = () => {\n  const middlewares = []; // enhancer :: 리덕스의 기능을 향상시켜주는 middleware\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer); // store.dispatch({\n  //     type:'CHANGE_NICKNAME',\n  //     data:'boogicho'\n  // })\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/jeonghong-gi/Desktop/nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","reducer","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAAQA,aAAR,QAA6B,oBAA7B;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,OAAP,MAAoB,mBAApB,C,CAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMC,cAAc,GAAG,MAAK;AAExB,QAAMC,WAAW,GAAG,EAApB,CAFwB,CAIxB;;AACA,QAAMC,QAAQ,GAAG,QACfN,OAAO,CAACC,eAAe,CAAC,GAAGI,WAAJ,CAAhB,CADQ,GAEfH,mBAAmB,CAACD,eAAe,CAAC,GAAGI,WAAJ,CAAhB,CAFrB;AAIA,QAAME,KAAK,GAAGR,WAAW,CAACI,OAAD,EAAUG,QAAV,CAAzB,CATwB,CAUxB;AACA;AACA;AACA;;AACA,SAAOC,KAAP;AAEH,CAhBD;;AAmBA,MAAMC,OAAO,GAAGV,aAAa,CAACM,cAAD,EAAgB;AACzCK,EAAAA,KAAK;AADoC,CAAhB,CAA7B;AAOA,eAAeD,OAAf","sourcesContent":["import {createWrapper}  from 'next-redux-wrapper'\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport reducer from '../reducers/index';\n\n\n// configureStore.js\n\n/* \n\nQ1. Redux , Mobax, ContextAPI를 왜 사용하는가? \n여러 컴포넌트들에서 공통적으로 쓰이는 데이터가 있는데 , \n그런 데이터들을 중앙에서 관리하기 위해서 쓰인다. (중앙데이터 저장소)\n매번 부모에서 자식컴포넌트로 프롭을 전달하는데 한계가 있다.\n\nex. 로그인한 사람 정보, 로그인 여부가 각 페이지의 권한 체크쓰인다. \n\n\n\n\nQ2 . ContextAPI 와  Redux, Mobax의 차이? \n=> 비동기를 지원하기 쉽냐 어렵냐 \n\n셋 다 중앙 저장소에서 데이터를 처리하는 방식이지만 \n리덕스나 모벡스는 비동기 처리도 알아서 해주는 반면에\n ContextAPI는 비동기 처리를 직접 구현해야한다.\n\n*중앙저장소가 있으면 보통 서버에서 데이터를 받아온다 .\n(서버에서 데이터를 받아오는 건 항상 비동기)\n\n*/\n\n\nconst configureStore = () =>{\n\n    const middlewares = []\n\n    // enhancer :: 리덕스의 기능을 향상시켜주는 middleware\n    const enhancer = process.env.NODE_ENV ==='production'\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(applyMiddleware(...middlewares))\n\n    const store = createStore(reducer, enhancer);\n    // store.dispatch({\n    //     type:'CHANGE_NICKNAME',\n    //     data:'boogicho'\n    // })\n    return store;\n\n};\n\n\nconst wrapper = createWrapper(configureStore,{\n    debug: process.env.NODE_ENV ==='development',\n\n\n});\n\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}