{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시테그 #익스프레스',\n    Image: [{\n      src: 'http://ph.spotvnews.co.kr/news/photo/201908/310916_385550_3004.jpg'\n    }, {\n      src: 'http://photo.jtbc.joins.com/news/2018/05/17/20180517071612505.jpg'\n    }, {\n      src: 'http://www.newsinside.kr/news/photo/201909/1039183_724625_318.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 업로드할 때 , 이미지의 경로들이 저장된다.\n  postAdded: false // 게시글 추가가 완료되면 true로 변경된다.\n\n}; // 액션이름을 상수로 빼주자~!\n\nvar ADD_POST = 'ADD_POST'; // 액션객체 생성\n\nexport var addPost = {\n  type: ADD_POST\n};\nvar dummyPost = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  content: '더미데이터입니다.',\n  Image: [],\n  Comments: []\n}; // 화면보다  데이터 구성이 더 중요하다\n// 액션 -> 리듀서 \n// reducer ; 이전 state + action  => 다음 state\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 추가되는 데이터를 앞에다가 넣어줘야  앞쪽에 게시물이 나온다.\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/jeonghong-gi/Desktop/nodebird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Image","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","reducer","state","action"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAE;AAEvBC,EAAAA,SAAS,EAAC,CAAC;AACPC,IAAAA,EAAE,EAAC,CADI;AAEPC,IAAAA,IAAI,EAAC;AACDD,MAAAA,EAAE,EAAC,CADF;AAEDE,MAAAA,QAAQ,EAAC;AAFR,KAFE;AAMPC,IAAAA,OAAO,EAAC,uBAND;AAOPC,IAAAA,KAAK,EAAC,CACF;AACIC,MAAAA,GAAG,EAAC;AADR,KADE,EAGA;AACEA,MAAAA,GAAG,EAAC;AADN,KAHA,EAMF;AACIA,MAAAA,GAAG,EAAC;AADR,KANE,CAPC;AAgBPC,IAAAA,QAAQ,EAAC,CAAC;AACNL,MAAAA,IAAI,EAAC;AACDC,QAAAA,QAAQ,EAAC;AADR,OADC;AAINC,MAAAA,OAAO,EAAC;AAJF,KAAD,EAKP;AACEF,MAAAA,IAAI,EAAC;AACDC,QAAAA,QAAQ,EAAC;AADR,OADP;AAIEC,MAAAA,OAAO,EAAC;AAJV,KALO;AAhBF,GAAD,CAFa;AA8BvBI,EAAAA,UAAU,EAAC,EA9BY;AA8BP;AAChBC,EAAAA,SAAS,EAAC,KA/Ba,CA+BH;;AA/BG,CAApB,C,CAmCP;;AACA,IAAMC,QAAQ,GAAG,UAAjB,C,CAGA;;AACA,OAAO,IAAMC,OAAO,GAAE;AAClBC,EAAAA,IAAI,EAACF;AADa,CAAf;AAKP,IAAMG,SAAS,GAAC;AACZZ,EAAAA,EAAE,EAAC,CADS;AAGZC,EAAAA,IAAI,EAAC;AACDD,IAAAA,EAAE,EAAC,CADF;AAEDE,IAAAA,QAAQ,EAAC;AAFR,GAHO;AAOZC,EAAAA,OAAO,EAAC,WAPI;AAQZC,EAAAA,KAAK,EAAC,EARM;AASZE,EAAAA,QAAQ,EAAC;AATG,CAAhB,C,CAeA;AACA;AAEI;;AACJ,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAgC;AAAA,MAA/BC,KAA+B,uEAAxBhB,YAAwB;AAAA,MAAViB,MAAU;;AAC5C,UAAOA,MAAM,CAACJ,IAAd;AACI,SAAKF,QAAL;AACI,6CACOK,KADP;AAEI;AACAf,QAAAA,SAAS,GAAEa,SAAF,4BAAgBE,KAAK,CAACf,SAAtB,EAHb;AAIIS,QAAAA,SAAS,EAAC;AAJd;;AAQJ;AACI,aAAOM,KAAP;AAXR;AAaH,CAdD;;AAgBA,eAAeD,OAAf","sourcesContent":["export const initialState ={\n    \n    mainPosts:[{\n        id:1,\n        User:{\n            id:1,\n            nickname:'제로초',\n        },\n        content:'첫 번째 게시글 #해시테그 #익스프레스',\n        Image:[\n            {\n                src:'http://ph.spotvnews.co.kr/news/photo/201908/310916_385550_3004.jpg'\n            },{\n                src:'http://photo.jtbc.joins.com/news/2018/05/17/20180517071612505.jpg'\n            },\n            {\n                src:'http://www.newsinside.kr/news/photo/201909/1039183_724625_318.jpg'\n            }],\n        Comments:[{\n            User:{\n                nickname:'nero',\n            },\n            content:'우와 개정판이 나왔군요~'\n        },{\n            User:{\n                nickname:'hero'\n            },\n            content:'얼른 사고싶어요'\n        }]\n    }],\n    imagePaths:[],  // 이미지 업로드할 때 , 이미지의 경로들이 저장된다.\n    postAdded:false,    // 게시글 추가가 완료되면 true로 변경된다.\n}\n\n\n// 액션이름을 상수로 빼주자~!\nconst ADD_POST = 'ADD_POST';\n\n\n// 액션객체 생성\nexport const addPost ={\n    type:ADD_POST,\n}\n\n\nconst dummyPost={\n    id:2,\n   \n    User:{\n        id:1,\n        nickname:'제로초'\n    },\n    content:'더미데이터입니다.',\n    Image:[],\n    Comments:[],\n\n};\n\n\n\n// 화면보다  데이터 구성이 더 중요하다\n// 액션 -> 리듀서 \n\n    // reducer ; 이전 state + action  => 다음 state\nconst reducer = (state= initialState, action) =>{\n    switch(action.type){\n        case ADD_POST:\n            return{\n                ...state,\n                // 추가되는 데이터를 앞에다가 넣어줘야  앞쪽에 게시물이 나온다.\n                mainPosts:[dummyPost, ...state.mainPosts],\n                postAdded:true,\n            };\n        \n\n        default:\n            return state;        \n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}