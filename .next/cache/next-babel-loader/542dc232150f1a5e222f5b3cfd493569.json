{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; // const initialState = {\n//     name:'zerocho',\n//     age:27,\n//     password:'babo',\n// }\n// const changeNickname = {\n//     type:'CHANGE_NICKNAME',\n//     data:'boogicho'\n// }\n// 모든 액션을 미리 만들어 놓는 것은 불가능하다. \n//그때그때 필요할 때 마다 동적으로 액션을 만들자\n// => action creator\n// const changeNickname = (data) =>{\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// }\n// changeNickname('boogicho');\n// {\n//     type:'CHANGE_NICKNAME',\n//     data: ' neue zeal'\n// }\n// store.dispatch(changeNickname('mighty tak'))\n// reducer ()\n// : 이전 상태와 액션을 통해서 다음 상태를 만들어낸다. \n//  reducer는 함수다. \n//  (이전상태 ,액션) => 다음상태\n// const rootReducer = (state = initialState, action)=>{\n//     switch(action.type){\n//         case 'CHANGE_NICKNAME':\n//             return{\n//                 // 이런식으로 해야 history가 남는다. \n//                 // name만 바꿔주고 나머지 것들은 그대로 남겨둔다. \n//                 ...state,\n//                 name: action.data,\n//             }\n//     }\n// };\n\nconst initialState = {\n  user: {\n    idLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    //아래 두 줄을 추가하면 리덕스까지 서버사이드 렌더링이 된다.\n    // next기능 \n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/jeonghong-gi/Desktop/nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","idLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","payload","isLoggedIn"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAuB,oBAAvB,C,CAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAIA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,UAAU,EAAE,KADX;AAEDD,IAAAA,IAAI,EAAE,IAFL;AAGDE,IAAAA,UAAU,EAAC,EAHV;AAIDC,IAAAA,SAAS,EAAC;AAJT,GADY;AAOjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,SAAS,EAAC;AADT;AAPY,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAS;AAChC,SAAM;AACFC,IAAAA,IAAI,EAAE,QADJ;AAEFD,IAAAA;AAFE,GAAN;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAK;AAC7B,SAAM;AACFD,IAAAA,IAAI,EAAE;AADJ,GAAN;AAIH,CALM;;AAWP,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAgC;AAEhD,UAAOA,MAAM,CAACJ,IAAd;AAEI;AACA;AACA,SAAKV,OAAL;AACI,6CAAWa,KAAX,GAAqBC,MAAM,CAACC,OAA5B;;AAEJ,SAAK,QAAL;AACI,6CACOF,KADP;AAEIX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAc,UAAAA,UAAU,EAAE,IAFZ;AAGAd,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAHb;AAFR;;AAUJ,SAAK,SAAL;AACI,6CACOI,KADP;AAEIX,QAAAA,IAAI,kCACEW,KAAK,CAACX,IADR;AAEAc,UAAAA,UAAU,EAAE,KAFZ;AAGAd,UAAAA,IAAI,EAAE;AAHN;AAFR;AAnBR;AA+BH,CAjCD;;AAuCA,eAAeU,WAAf","sourcesContent":["import  {HYDRATE} from 'next-redux-wrapper'\n\n\n// const initialState = {\n//     name:'zerocho',\n//     age:27,\n//     password:'babo',\n\n// }\n\n// const changeNickname = {\n//     type:'CHANGE_NICKNAME',\n//     data:'boogicho'\n// }\n\n\n\n\n// 모든 액션을 미리 만들어 놓는 것은 불가능하다. \n//그때그때 필요할 때 마다 동적으로 액션을 만들자\n// => action creator\n// const changeNickname = (data) =>{\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// }\n\n// changeNickname('boogicho');\n// {\n//     type:'CHANGE_NICKNAME',\n//     data: ' neue zeal'\n\n// }\n\n// store.dispatch(changeNickname('mighty tak'))\n\n\n\n// reducer ()\n// : 이전 상태와 액션을 통해서 다음 상태를 만들어낸다. \n//  reducer는 함수다. \n//  (이전상태 ,액션) => 다음상태\n\n// const rootReducer = (state = initialState, action)=>{\n\n//     switch(action.type){\n//         case 'CHANGE_NICKNAME':\n//             return{\n//                 // 이런식으로 해야 history가 남는다. \n//                 // name만 바꿔주고 나머지 것들은 그대로 남겨둔다. \n//                 ...state,\n//                 name: action.data,\n//             }\n\n//     }\n\n// };\n\n\n\nconst initialState = {\n    user:{\n        idLoggedIn: false,\n        user: null,\n        signUpData:{},\n        loginData:{}\n    },\n    post:{\n        mainPosts:[],\n    }\n}\n\nexport const loginAction = (data) =>{\n    return{\n        type: 'LOG_IN',\n        data,\n    }\n}\n\nexport const logoutAction = () =>{\n    return{\n        type: 'LOG_OUT',\n\n    }\n}\n\n\n\n\n\nconst rootReducer = (state = initialState, action)=>{\n  \n    switch(action.type){\n\n        //아래 두 줄을 추가하면 리덕스까지 서버사이드 렌더링이 된다.\n        // next기능 \n        case HYDRATE:\n            return {...state, ...action.payload}\n\n        case 'LOG_IN':\n            return{\n                ...state,\n                user:{\n                    ...state.user,\n                    isLoggedIn: true,\n                    user: action.data\n                }\n                \n            }\n\n        case 'LOG_OUT':\n            return{\n                ...state,\n                user:{\n                   ...state.user,\n                    isLoggedIn: false,\n                    user: null\n                }\n                    \n            }\n\n    }\n\n};\n\n\n\n\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}